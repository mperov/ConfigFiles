set tabpagemax=30 # increasing of maximum tabs which can be opened by user

if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible	" Use Vim defaults (much better!)
set bs=indent,eol,start		" allow backspacing over everything in insert mode
"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

filetype plugin on

if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

"–í—ã—Ä—É–±–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å VI:
set nocompatible

""–í–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏ —Ç–∏–ø–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:
filetype on
filetype plugin on

"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–æ–≤ –¥–ª—è Python, —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏—è–º
set tabstop=4 "—Ä–∞–Ω—å—à–µ –±—ã–ª–æ 2
set shiftwidth=4 "—Ä–∞–Ω—å—à–µ –±—ã–ª–æ 2
set smarttab
set expandtab "–°—Ç–∞–≤–∏–º —Ç–∞–±—ã –ø—Ä–æ–±–µ–ª–∞–º–∏
set softtabstop=4 "2 –ø—Ä–æ–±–µ–ª–∞ –≤ —Ç–∞–±–µ
"–ê–≤—Ç–æ–æ—Ç—Å—Ç—É–ø
set autoindent
"–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å
let python_highlight_all = 1
""–í–∫–ª—é—á–∞–µ–º 256 —Ü–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –º—ã –≤–µ–¥—å —Ä–∞–±–æ—Ç–∞–µ–º –∏–∑ –∏–∫—Å–æ–≤?
"–ù—É–∂–Ω–æ –≤–æ –º–Ω–æ–≥–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ gnome-terminal
set t_Co=256

""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ omnicomletion –¥–ª—è Python (–∞ —Ç–∞–∫ –∂–µ –¥–ª—è js, html –∏ css)
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"–ê–≤—Ç–æ –∫–æ–º–ø–ª–∏—Ç –ø–æ —Ç–∞–±—É
function InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\"
    else
        return "\<c-p>"
    endif
endfunction

imap <c-r>=InsertTabWrapper() set complete=""  set complete+=.    set complete+=k    set complete+=b    set complete+=t

""–ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—ã—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –∫–æ–Ω—Ü–∞—Ö (—Ç–æ–ª—å–∫–æ –≤ .py —Ñ–∞–π–ª–∞—Ö)
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``
"–í .py —Ñ–∞–π–ª–∞—Ö –≤–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

map <F4> [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
"map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
nmap <F8> :TagbarToggle<CR>
nnoremap <C-F8> :nohlsearch<CR>


set wildmenu
set wcm=<Tab>
"menu Exec.GForth  :!gforth % <CR>
"menu Exec.Perl    :!perl % <CR>
menu Exec.Python  :!python % <CR>
"menu Exec.Ruby    :!ruby % <CR>
menu Exec.bash      :!/bin/bash<CR>
"menu Exec.xterm     :!xterm<CR>
"menu Exec.mc        :!mc<CR>
"menu Exec.xterm_mc  :!xterm -e mc<CR>
map <F9> :emenu Exec.<Tab>


function! InsertTabWrapper(direction)
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    elseif "backward" == a:direction
        return "\<c-p>"
    else
        return "\<c-n>"
    endif
 endfunction
 inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
 inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>

imap <F6> <Esc> :tabnext <CR>i
map <F6> :tabnext <CR>

imap <F4> <Esc>:browse tabnew<CR> 
map <F4> <Esc>:browse tabnew<CR>

imap <F5> <Esc> :tabprev <CR>i
map <F5> :tabprev <CR>

imap <F2> <Esc>:w<CR>
map <F2> <Esc>:w<CR>
